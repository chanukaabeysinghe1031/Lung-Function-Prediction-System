# -*- coding: utf-8 -*-
"""CNN_MODEL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tsdIw8NHSoPrt4wmre2C1c1VVGFKwrnL

# **A Deep Learning Approach to Predict Severity of Lung Function Based on a CT Scan of the Lung**

###Loading datasets from the google drive

Loading training data
"""

from google.colab import drive
import os
import numpy as np
drive.mount('/content/drive')

!scp 'drive/My Drive/Final Year Project/Model/dataset-images-10-50-50.npy' .
!scp 'drive/My Drive/Final Year Project/Model/dataset-labels.npy' .

image_dataset = np.load('dataset-images-10-50-50.npy', allow_pickle=True)
label_dataset = np.load('dataset-labels.npy', allow_pickle=True)

image_dataset.shape # Find the shape of the image dataset

label_dataset.shape # Find the shape of the label dataset

X = []
Y = []

for patient in label_dataset:
  Y.append(patient)
for image_set in image_dataset:
  #patient_img = np.transpose(patient[0], (1,2,0))
  X.append(image_set)

np.array(X).shape

np.array(Y).shape

!scp 'drive/My Drive/Final Year Project/Model/testingdataset-images-10-50-50.npy' .
!scp 'drive/My Drive/Final Year Project/Model/testingdataset-labels.npy' .

testing_image_dataset = np.load('testingdataset-images-10-50-50.npy', allow_pickle=True)
testing_label_dataset = np.load('testingdataset-labels.npy', allow_pickle=True)

X_testing = []
Y_testing = []

for patient in testing_label_dataset:
  Y_testing.append(patient)
for image_set in testing_image_dataset:
  #patient_img = np.transpose(patient[0], (1,2,0))
  X_testing.append(image_set)

X_testing= np.array(X_testing)
Y_testing= np.array(Y_testing)

"""###Drawing CT images of some patients

Patient 0
"""

import matplotlib.pyplot as plt
for i in range(10):
   plt.imshow(X[0][:, : ,i])
   plt.show()

Y[0]

"""Patient 916 """

for i in range(10):
   plt.imshow(X[916][:, : ,i])
   plt.show()

Y[916]

X= np.array(X)
Y= np.array(Y)

"""### CNN MODEL"""

import tensorflow as tf
import datetime, os
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
from keras.optimizers import Adam

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard
# %tensorboard --logdir logs

model = models.Sequential()
model.add(layers.Conv2D(8, (3, 3), activation='relu', input_shape=(50, 50, 10)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(8, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(8, (3, 3), activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(32, activation='relu'))
model.add(layers.Dense(1,activation='linear'))

opt = Adam(lr=0.03)
model.compile(optimizer=opt,
              loss=tf.keras.losses.MeanAbsolutePercentageError(),
              metrics=['mse', 'mae', 'mape'])
logdir = os.path.join("logs", datetime.datetime.now().strftime("%Y%m%d-%H%M%S"))
tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, histogram_freq=1)
history = model.fit(X, Y, epochs=300,validation_data=(X_testing, Y_testing))

"""### Evaluate the model"""

plt.plot(history.history['mse'])
plt.plot(history.history['mae'])
plt.plot(history.history['mape'])
plt.show()



predictions = model(X_testing)

predictions

Y_testing

"""###Visualize using Seaborn

---





"""

import seaborn as sns